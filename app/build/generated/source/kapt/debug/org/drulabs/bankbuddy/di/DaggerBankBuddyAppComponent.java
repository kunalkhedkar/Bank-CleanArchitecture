// Generated by Dagger (https://google.github.io/dagger).
package org.drulabs.bankbuddy.di;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import androidx.lifecycle.ViewModel;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import io.reactivex.Scheduler;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import org.drulabs.bankbuddy.application.BankBuddyApp;
import org.drulabs.bankbuddy.data.mapper.TransactionDomainDataMapper_Factory;
import org.drulabs.bankbuddy.data.mapper.UserInfoDomainDataMapper_Factory;
import org.drulabs.bankbuddy.data.repository.BankingRepositoryImpl_Factory;
import org.drulabs.bankbuddy.domain.usecases.FilterTransactionsTask_Factory;
import org.drulabs.bankbuddy.domain.usecases.GetUserInfoTask_Factory;
import org.drulabs.bankbuddy.domain.usecases.GetUserTransactionsTask_Factory;
import org.drulabs.bankbuddy.domain.usecases.TransactionStatusUpdaterTask_Factory;
import org.drulabs.bankbuddy.local.database.BankBuddyDB;
import org.drulabs.bankbuddy.local.database.TransactionDAO;
import org.drulabs.bankbuddy.local.database.UserInfoDAO;
import org.drulabs.bankbuddy.local.mapper.TransactionDataLocalMapper_Factory;
import org.drulabs.bankbuddy.local.mapper.UserInfoDataLocalMapper_Factory;
import org.drulabs.bankbuddy.local.source.LocalDataSourceImpl_Factory;
import org.drulabs.bankbuddy.presentation.factory.ViewModelFactory;
import org.drulabs.bankbuddy.presentation.factory.ViewModelFactory_Factory;
import org.drulabs.bankbuddy.presentation.mapper.TransactionEntityMapper_Factory;
import org.drulabs.bankbuddy.presentation.mapper.UserInfoEntityMapper_Factory;
import org.drulabs.bankbuddy.presentation.viewmodels.HomeVM;
import org.drulabs.bankbuddy.presentation.viewmodels.HomeVM_Factory;
import org.drulabs.bankbuddy.presentation.viewmodels.TransactionsVM;
import org.drulabs.bankbuddy.presentation.viewmodels.TransactionsVM_Factory;
import org.drulabs.bankbuddy.remote.mapper.TransactionDataNetworkMapper_Factory;
import org.drulabs.bankbuddy.remote.mapper.UserInfoDataNetworkMapper_Factory;
import org.drulabs.bankbuddy.remote.source.RemoteDataSourceImpl_Factory;
import org.drulabs.bankbuddy.ui.home.HomeActivity;
import org.drulabs.bankbuddy.ui.home.HomeActivity_MembersInjector;
import org.drulabs.bankbuddy.ui.transactions.TransactionList;
import org.drulabs.bankbuddy.ui.transactions.TransactionList_MembersInjector;

public final class DaggerBankBuddyAppComponent implements BankBuddyAppComponent {
  private Provider<AppModule_ContributesMainActivity$app_debug.HomeActivitySubcomponent.Builder>
      homeActivitySubcomponentBuilderProvider;

  private Provider<
          AppModule_ContributesTransactionList$app_debug.TransactionListSubcomponent.Builder>
      transactionListSubcomponentBuilderProvider;

  private IdentityModule_ProvidesUserIDFactory providesUserIDProvider;

  private Provider<Application> applicationProvider;

  private Provider<BankBuddyDB> providesDatabaseProvider;

  private Provider<UserInfoDAO> providesUserInfoDAOProvider;

  private Provider<TransactionDAO> providesTransactionDAOProvider;

  private LocalDataSourceImpl_Factory localDataSourceImplProvider;

  private RemoteModule_ProvidesRetrofitFactory providesRetrofitProvider;

  private RemoteModule_ProvidesBankingServiceFactory providesBankingServiceProvider;

  private RemoteDataSourceImpl_Factory remoteDataSourceImplProvider;

  private BankingRepositoryImpl_Factory bankingRepositoryImplProvider;

  private Provider<Scheduler> providesBackgroundSchedulerProvider;

  private Provider<Scheduler> providesForegroundSchedulerProvider;

  private GetUserInfoTask_Factory getUserInfoTaskProvider;

  private HomeVM_Factory homeVMProvider;

  private GetUserTransactionsTask_Factory getUserTransactionsTaskProvider;

  private FilterTransactionsTask_Factory filterTransactionsTaskProvider;

  private TransactionStatusUpdaterTask_Factory transactionStatusUpdaterTaskProvider;

  private TransactionsVM_Factory transactionsVMProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerBankBuddyAppComponent(Builder builder) {
    initialize(builder);
  }

  public static BankBuddyAppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(HomeActivity.class, (Provider) homeActivitySubcomponentBuilderProvider)
        .put(TransactionList.class, (Provider) transactionListSubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.homeActivitySubcomponentBuilderProvider =
        new Provider<
            AppModule_ContributesMainActivity$app_debug.HomeActivitySubcomponent.Builder>() {
          @Override
          public AppModule_ContributesMainActivity$app_debug.HomeActivitySubcomponent.Builder
              get() {
            return new HomeActivitySubcomponentBuilder();
          }
        };
    this.transactionListSubcomponentBuilderProvider =
        new Provider<
            AppModule_ContributesTransactionList$app_debug.TransactionListSubcomponent.Builder>() {
          @Override
          public AppModule_ContributesTransactionList$app_debug.TransactionListSubcomponent.Builder
              get() {
            return new TransactionListSubcomponentBuilder();
          }
        };
    this.providesUserIDProvider =
        IdentityModule_ProvidesUserIDFactory.create(builder.identityModule);
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.providesDatabaseProvider =
        DoubleCheck.provider(
            LocalPersistenceModule_ProvidesDatabaseFactory.create(
                builder.localPersistenceModule, applicationProvider));
    this.providesUserInfoDAOProvider =
        DoubleCheck.provider(
            LocalPersistenceModule_ProvidesUserInfoDAOFactory.create(
                builder.localPersistenceModule, providesDatabaseProvider));
    this.providesTransactionDAOProvider =
        DoubleCheck.provider(
            LocalPersistenceModule_ProvidesTransactionDAOFactory.create(
                builder.localPersistenceModule, providesDatabaseProvider));
    this.localDataSourceImplProvider =
        LocalDataSourceImpl_Factory.create(
            UserInfoDataLocalMapper_Factory.create(),
            TransactionDataLocalMapper_Factory.create(),
            providesUserInfoDAOProvider,
            providesTransactionDAOProvider);
    this.providesRetrofitProvider =
        RemoteModule_ProvidesRetrofitFactory.create(builder.remoteModule);
    this.providesBankingServiceProvider =
        RemoteModule_ProvidesBankingServiceFactory.create(
            builder.remoteModule, providesRetrofitProvider);
    this.remoteDataSourceImplProvider =
        RemoteDataSourceImpl_Factory.create(
            (Provider) UserInfoDataNetworkMapper_Factory.create(),
            (Provider) TransactionDataNetworkMapper_Factory.create(),
            providesBankingServiceProvider);
    this.bankingRepositoryImplProvider =
        BankingRepositoryImpl_Factory.create(
            (Provider) UserInfoDomainDataMapper_Factory.create(),
            (Provider) TransactionDomainDataMapper_Factory.create(),
            (Provider) localDataSourceImplProvider,
            (Provider) remoteDataSourceImplProvider);
    this.providesBackgroundSchedulerProvider =
        DoubleCheck.provider(
            DomainModule_ProvidesBackgroundSchedulerFactory.create(builder.domainModule));
    this.providesForegroundSchedulerProvider =
        DoubleCheck.provider(
            DomainModule_ProvidesForegroundSchedulerFactory.create(builder.domainModule));
    this.getUserInfoTaskProvider =
        GetUserInfoTask_Factory.create(
            (Provider) bankingRepositoryImplProvider,
            providesBackgroundSchedulerProvider,
            providesForegroundSchedulerProvider);
    this.homeVMProvider =
        HomeVM_Factory.create(
            providesUserIDProvider,
            (Provider) UserInfoEntityMapper_Factory.create(),
            getUserInfoTaskProvider);
    this.getUserTransactionsTaskProvider =
        GetUserTransactionsTask_Factory.create(
            (Provider) bankingRepositoryImplProvider,
            providesBackgroundSchedulerProvider,
            providesForegroundSchedulerProvider);
    this.filterTransactionsTaskProvider =
        FilterTransactionsTask_Factory.create(
            (Provider) bankingRepositoryImplProvider,
            providesBackgroundSchedulerProvider,
            providesForegroundSchedulerProvider);
    this.transactionStatusUpdaterTaskProvider =
        TransactionStatusUpdaterTask_Factory.create(
            (Provider) bankingRepositoryImplProvider,
            providesBackgroundSchedulerProvider,
            providesForegroundSchedulerProvider);
    this.transactionsVMProvider =
        TransactionsVM_Factory.create(
            providesUserIDProvider,
            (Provider) TransactionEntityMapper_Factory.create(),
            getUserTransactionsTaskProvider,
            filterTransactionsTaskProvider,
            transactionStatusUpdaterTaskProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2)
            .put(HomeVM.class, (Provider) homeVMProvider)
            .put(TransactionsVM.class, (Provider) transactionsVMProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(BankBuddyApp app) {
    injectBankBuddyApp(app);
  }

  private BankBuddyApp injectBankBuddyApp(BankBuddyApp instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder implements BankBuddyAppComponent.Builder {
    private IdentityModule identityModule;

    private LocalPersistenceModule localPersistenceModule;

    private RemoteModule remoteModule;

    private DomainModule domainModule;

    private Application application;

    @Override
    public BankBuddyAppComponent build() {
      if (identityModule == null) {
        this.identityModule = new IdentityModule();
      }
      if (localPersistenceModule == null) {
        this.localPersistenceModule = new LocalPersistenceModule();
      }
      if (remoteModule == null) {
        this.remoteModule = new RemoteModule();
      }
      if (domainModule == null) {
        this.domainModule = new DomainModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerBankBuddyAppComponent(this);
    }

    @Override
    public Builder application(Application app) {
      this.application = Preconditions.checkNotNull(app);
      return this;
    }
  }

  private final class HomeActivitySubcomponentBuilder
      extends AppModule_ContributesMainActivity$app_debug.HomeActivitySubcomponent.Builder {
    private HomeActivity seedInstance;

    @Override
    public AppModule_ContributesMainActivity$app_debug.HomeActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(HomeActivity.class.getCanonicalName() + " must be set");
      }
      return new HomeActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HomeActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl
      implements AppModule_ContributesMainActivity$app_debug.HomeActivitySubcomponent {
    private HomeActivitySubcomponentImpl(HomeActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);
    }

    private HomeActivity injectHomeActivity(HomeActivity instance) {
      HomeActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerBankBuddyAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class TransactionListSubcomponentBuilder
      extends AppModule_ContributesTransactionList$app_debug.TransactionListSubcomponent.Builder {
    private TransactionList seedInstance;

    @Override
    public AppModule_ContributesTransactionList$app_debug.TransactionListSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(TransactionList.class.getCanonicalName() + " must be set");
      }
      return new TransactionListSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(TransactionList arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class TransactionListSubcomponentImpl
      implements AppModule_ContributesTransactionList$app_debug.TransactionListSubcomponent {
    private TransactionListSubcomponentImpl(TransactionListSubcomponentBuilder builder) {}

    @Override
    public void inject(TransactionList arg0) {
      injectTransactionList(arg0);
    }

    private TransactionList injectTransactionList(TransactionList instance) {
      TransactionList_MembersInjector.injectViewModelFactory(
          instance, DaggerBankBuddyAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
