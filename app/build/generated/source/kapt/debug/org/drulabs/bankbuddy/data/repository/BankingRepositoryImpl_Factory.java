// Generated by Dagger (https://google.github.io/dagger).
package org.drulabs.bankbuddy.data.repository;

import dagger.internal.Factory;
import javax.inject.Provider;
import org.drulabs.bankbuddy.data.mapper.Mapper;
import org.drulabs.bankbuddy.data.model.TransactionData;
import org.drulabs.bankbuddy.data.model.UserInfoData;
import org.drulabs.bankbuddy.domain.entities.TransactionEntity;
import org.drulabs.bankbuddy.domain.entities.UserInfoEntity;

public final class BankingRepositoryImpl_Factory implements Factory<BankingRepositoryImpl> {
  private final Provider<Mapper<UserInfoEntity, UserInfoData>> arg0Provider;

  private final Provider<Mapper<TransactionEntity, TransactionData>> arg1Provider;

  private final Provider<LocalDataSource> arg2Provider;

  private final Provider<RemoteDataSource> arg3Provider;

  public BankingRepositoryImpl_Factory(
      Provider<Mapper<UserInfoEntity, UserInfoData>> arg0Provider,
      Provider<Mapper<TransactionEntity, TransactionData>> arg1Provider,
      Provider<LocalDataSource> arg2Provider,
      Provider<RemoteDataSource> arg3Provider) {
    this.arg0Provider = arg0Provider;
    this.arg1Provider = arg1Provider;
    this.arg2Provider = arg2Provider;
    this.arg3Provider = arg3Provider;
  }

  @Override
  public BankingRepositoryImpl get() {
    return provideInstance(arg0Provider, arg1Provider, arg2Provider, arg3Provider);
  }

  public static BankingRepositoryImpl provideInstance(
      Provider<Mapper<UserInfoEntity, UserInfoData>> arg0Provider,
      Provider<Mapper<TransactionEntity, TransactionData>> arg1Provider,
      Provider<LocalDataSource> arg2Provider,
      Provider<RemoteDataSource> arg3Provider) {
    return new BankingRepositoryImpl(
        arg0Provider.get(), arg1Provider.get(), arg2Provider.get(), arg3Provider.get());
  }

  public static BankingRepositoryImpl_Factory create(
      Provider<Mapper<UserInfoEntity, UserInfoData>> arg0Provider,
      Provider<Mapper<TransactionEntity, TransactionData>> arg1Provider,
      Provider<LocalDataSource> arg2Provider,
      Provider<RemoteDataSource> arg3Provider) {
    return new BankingRepositoryImpl_Factory(
        arg0Provider, arg1Provider, arg2Provider, arg3Provider);
  }

  public static BankingRepositoryImpl newBankingRepositoryImpl(
      Mapper<UserInfoEntity, UserInfoData> arg0,
      Mapper<TransactionEntity, TransactionData> arg1,
      LocalDataSource arg2,
      RemoteDataSource arg3) {
    return new BankingRepositoryImpl(arg0, arg1, arg2, arg3);
  }
}
