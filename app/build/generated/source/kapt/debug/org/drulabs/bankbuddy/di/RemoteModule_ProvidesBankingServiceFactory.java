// Generated by Dagger (https://google.github.io/dagger).
package org.drulabs.bankbuddy.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.drulabs.bankbuddy.remote.api.BankingService;
import retrofit2.Retrofit;

public final class RemoteModule_ProvidesBankingServiceFactory implements Factory<BankingService> {
  private final RemoteModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RemoteModule_ProvidesBankingServiceFactory(
      RemoteModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public BankingService get() {
    return provideInstance(module, retrofitProvider);
  }

  public static BankingService provideInstance(
      RemoteModule module, Provider<Retrofit> retrofitProvider) {
    return proxyProvidesBankingService(module, retrofitProvider.get());
  }

  public static RemoteModule_ProvidesBankingServiceFactory create(
      RemoteModule module, Provider<Retrofit> retrofitProvider) {
    return new RemoteModule_ProvidesBankingServiceFactory(module, retrofitProvider);
  }

  public static BankingService proxyProvidesBankingService(
      RemoteModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.providesBankingService(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
